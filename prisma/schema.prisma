generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Guild {
  /// Discord guild ID (primary key)
  id                 String              @id
  name               String?
  config             GuildConfig?
  users              User[]
  pollVotes          PollVotes[]
  balances           Balance[]
  countingGames      CountingGame[]
  levels             Level[]
  moderationChannels ModerationChannel[]
  autoJoinRoles      AutoJoinRoles[]
  channelSettings    ChannelSettings?
  reactions          Reaction[]
  redditPosts        RedditPosts[]
}

model GuildConfig {
  id             Int      @id @default(autoincrement())
  rankupMessages Boolean  @default(false)
  joinMessages   Boolean  @default(false)
  bannedWords    String[] @default([])
  guildId        String   @unique
  guild          Guild    @relation(fields: [guildId], references: [id])
}

model User {
  id                String         @id @default(uuid())
  /// Discord user ID
  discordId         String
  countingScore     Int            @default(0)
  warnings          Int            @default(0)
  guildId           String
  guild             Guild          @relation(fields: [guildId], references: [id])
  pollVotes         PollVotes[] // Polls created by this user
  balances          Balance[]
  levels            Level[]
  lastCountingGames CountingGame[] @relation("LastPersonRelation")
}

model PollVotes {
  id          Int      @id @default(autoincrement())
  guildId     String
  guild       Guild    @relation(fields: [guildId], references: [id])
  messageId   String
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  upMembers   String[] @default([])
  downMembers String[] @default([])
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
}

model Balance {
  id      String @id @default(uuid())
  userId  String
  guildId String
  balance Int    @default(0)
  user    User   @relation(fields: [userId], references: [id])
  guild   Guild  @relation(fields: [guildId], references: [id])
}

model CountingGame {
  id           String  @id @default(uuid())
  guildId      String
  guild        Guild   @relation(fields: [guildId], references: [id])
  channelId    String  @unique
  count        Int     @default(1)
  lastPersonId String?
  lastPerson   User?   @relation("LastPersonRelation", fields: [lastPersonId], references: [id])
}

model Level {
  id      String @id @default(uuid())
  userId  String
  guildId String
  xp      Int    @default(0)
  level   Int    @default(0)
  user    User   @relation(fields: [userId], references: [id])
  guild   Guild  @relation(fields: [guildId], references: [id])
}

model ModerationChannel {
  id                          Int                       @id @default(autoincrement())
  guildId                     String                    @unique
  guild                       Guild                     @relation(fields: [guildId], references: [id])
  channelId                   String
  settings                    ModerationChannelSettings @relation(fields: [moderationChannelSettingsId], references: [id])
  moderationChannelSettingsId Int                       @unique
}

model ModerationChannelSettings {
  id                  Int                @id @default(autoincrement())
  moderationChannelId Int                @unique
  deletedMessage      Boolean            @default(true)
  editedMessage       Boolean            @default(true)
  userLeft            Boolean            @default(true)
  userJoin            Boolean            @default(true)
  userBan             Boolean            @default(true)
  userTimeout         Boolean            @default(true)
  userKick            Boolean            @default(true)
  moderationChannel   ModerationChannel?
}

model Reaction {
  id        Int    @id @default(autoincrement())
  guildId   String
  guild     Guild  @relation(fields: [guildId], references: [id])
  messageId String
  emoji     String
  role      String
}

model AutoJoinRoles {
  id      Int    @id @default(autoincrement())
  guildId String
  guild   Guild  @relation(fields: [guildId], references: [id])
  role    String
}

model ChannelSettings {
  id                      Int      @id @default(autoincrement())
  guildId                 String   @unique
  guild                   Guild    @relation(fields: [guildId], references: [id])
  channelIdRedditPosts    String?  @unique
  subreddits              String[] @default([])
  subredditsIntervalHours Int      @default(3)
  channelIdMembers        String?  @unique
  channelIdOnline         String?  @unique
  channelIdOffline        String?  @unique
  joinMessages            String?
}

model RedditPosts {
  id       Int    @id @default(autoincrement())
  title    String
  sub      String
  guildId  String
  redditId String
  guild    Guild  @relation(fields: [guildId], references: [id])
}
